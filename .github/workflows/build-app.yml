name: Build Desktop Application

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'src-tauri/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'src-tauri/**'
  workflow_dispatch: # Manual trigger

env:
  NODE_VERSION: '20'
  YARN_VERSION: '1.22.22'
  RUST_VERSION: 'stable'

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'linux'
            os: 'ubuntu-22.04'
            rust-target: 'x86_64-unknown-linux-gnu'
            artifact-suffix: 'linux-x64'
          - platform: 'windows'
            os: 'windows-latest'
            rust-target: 'x86_64-pc-windows-msvc'
            artifact-suffix: 'windows-x64'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.rust-target }}

      - name: Setup Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libssl-dev \
            pkg-config \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libayatana-appindicator3-dev

      - name: Setup Yarn
        run: |
          corepack enable
          yarn set version ${{ env.YARN_VERSION }}

      - name: Install dependencies
        run: yarn install

      - name: Build frontend
        run: yarn build
        env:
          NODE_ENV: production

      - name: Build Tauri application
        run: yarn tauri build
        # TODO: placeholder for signed build
        # env:
        #   TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        #   TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Prepare artifacts (Linux)
        if: matrix.platform == 'linux'
        run: |
          mkdir -p dist
          # Copy AppImage
          find src-tauri/target/release/bundle/appimage/ -name "*.AppImage" -exec cp {} dist/zellia-control-${{ matrix.artifact-suffix }}.AppImage \;
          # Copy deb package
          find src-tauri/target/release/bundle/deb/ -name "*.deb" -exec cp {} dist/zellia-control-${{ matrix.artifact-suffix }}.deb \;
          # Copy binary
          cp src-tauri/target/release/zellia-control dist/zellia-control-${{ matrix.artifact-suffix }}

      - name: Prepare artifacts (Windows)
        if: matrix.platform == 'windows'
        run: |
          mkdir -p dist
          # Copy MSI installer
          Get-ChildItem -Path "src-tauri/target/release/bundle/msi/" -Filter "*.msi" | Copy-Item -Destination "dist/zellia-control-${{ matrix.artifact-suffix }}.msi"
          # Copy NSIS installer
          Get-ChildItem -Path "src-tauri/target/release/bundle/nsis/" -Filter "*.exe" | Copy-Item -Destination "dist/zellia-control-${{ matrix.artifact-suffix }}-installer.exe"
          # Copy binary
          Copy-Item "src-tauri/target/release/zellia-control.exe" -Destination "dist/zellia-control-${{ matrix.artifact-suffix }}.exe"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zellia-control-${{ matrix.artifact-suffix }}
          path: dist/
          compression-level: 9

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find release-artifacts/ -type f -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}